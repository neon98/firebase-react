{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Form","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","username","email","dbRef","firebase","ref","child","push","handleChange","bind","assertThisInitialized","handleSubmit","event","name","target","value","setState","defineProperty","preventDefault","set","document","getElementById","reset","alert","react_default","a","createElement","onSubmit","id","type","onChange","Component","UserList","_this2","data","_this3","on","snap","users","forEach","childsnap","val","userslist","map","user","App","_this4","speed","_this5","className","App_Form","App_UserList","Boolean","window","location","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.869ea6ab.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport * as firebase from 'firebase';\n\nclass Form extends Component{\n  constructor(){\n    super();\n    this.state = {\n      username : '',\n      email : ''\n    }\n    this.dbRef = firebase.database().ref().child('react').child('users').push()\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event){\n    const name = event.target.name;\n    const value = event.target.value;\n    this.setState({\n      [name]:value\n    });\n  }\n\n  handleSubmit(event){\n    event.preventDefault();\n    this.dbRef.set({\n      username: this.state.username,\n      email: this.state.email\n    });\n    document.getElementById('myForm').reset();\n    alert('input cleared!')\n  }\n\n  render(){\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit} id=\"myForm\">\n          <label>\n            User name :\n            <input \n              name=\"username\" \n              type=\"text\"\n              onChange={this.handleChange}\n              />\n          </label>\n          <br/>\n          <label>\n            Email :\n            <input \n              name=\"email\"\n              type=\"text\"\n              onChange={this.handleChange}\n              />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nclass UserList extends Component{\n  constructor(){\n    super();\n    this.state = {\n      data: []\n    }\n  }\n\n  componentDidMount(){\n    const dbRef = firebase.database().ref().child('react').child('users');\n    dbRef.on('value', snap => {\n      var users = [];\n      snap.forEach(function(childsnap){\n        users.push(childsnap.val());\n      });\n      this.setState({\n        data : users\n      });\n    });\n  }\n  render(){\n    var users = this.state.data;\n    var userslist = users.map(user => <li> Username : {user.username}, Email: {user.email}</li>)\n    return (\n      <div>\n        <ul>{userslist}</ul>\n      </div>\n    );\n  }\n}\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      speed: 10\n    }\n  }\n  componentDidMount(){\n    const rootRef = firebase.database().ref().child('react');\n    const speedRef = rootRef.child('speed');\n    speedRef.on('value', snap => {\n      this.setState({\n        speed: snap.val()\n      })\n    });\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <h1>{this.state.speed}</h1>\n        <Form/>\n        <UserList/>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from 'firebase';\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyAO1jbRZAvxBXGBlTJJ1EqpLMRYqDtbpqU\",\n    authDomain: \"fir-react-b36d8.firebaseapp.com\",\n    databaseURL: \"https://fir-react-b36d8.firebaseio.com\",\n    projectId: \"fir-react-b36d8\",\n    storageBucket: \"fir-react-b36d8.appspot.com\",\n    messagingSenderId: \"910849677808\",\n    appId: \"1:910849677808:web:b1bc341ee075bf83\"\n};\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render( <App/> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}